Right Shift >>
010 -> shift by 1 will be 001
Left Shift <<
010 -> 100 Shift by 1
Not -> Not(5) -> flip bits 101 -> 010 then check is it positive or negative, if negative take 2's complement and then store otherwise stop

Swap two numbers
a = a ^ b
b = a ^ b -> (a^b) ^ b
a = a ^ b -> (a^b) ^ (a^b)

Set
101 -> set 1st bit -> 111, we will use or operator and with like 1 left shift by 1 -> 10
101
010 == 1 1 1
Clear
111 -> clear 1st bit -> 101, we will use and operator and with not of (1 left shift that is 01)
101 -> 101
Toggle bit
101 -> toggle first bit -> In XOR , 00,11 -> gives us 0, different bits gives us 1, take left shift and then XOR
Removing the last set bit using n and n-1

Check Power of 2
1 2 4 8 16 32 64, if there is 1 set bit using n & n-1 == 0 then power of 2
Count number of Bits


For odd numbers is 1, if n & 1 == n%2==1

10 ^ 10 ^ 10 == 

n = n //2 , == n = n >>1

low+hight >> 1 

better approach ->
while(n!=0){
 n = n & n-1 ,, it will set 1 bits turn off by 1 by 1 from right side
}

2,2,2,3,3,3
6+9 == 15 == 0
1,2,2,2,3,3,3 == 16,1
6
