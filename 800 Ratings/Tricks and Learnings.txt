If we need to find pairs of K adjacent elements < X or either > X, then keep on counting element
  inside loop
   if condition:
      count +=1 
    else:
      pair += count//k # k is either 2 adjacent, 3 adjacent, 4 adjacent
      count = 0 # for next pair
# huskta h add hi krta jaye end tk so islye dubara huskta h pair mil gaye
  pair += count//k
example:
Minimum number of days to make n boquets
 for i in range(n):
                if bloomDay[i]<=day:
                    countAdj+=1
                else:
                    # add the pair of adjacent
                    b += countAdj//k
                    countAdj=0
             b += countAdj//k

Keep this in mind -> while left<right: when right = mid, left = mid+1

  

By sorting we can compare first and last elements to check if array has same elements.
Even Odd comparison.

Permutations -> No of ways, arrangement ,,, n! divided by (n-r)!
Combinations can be of different size. AB and BA is same combination  n! divided by r! * (n-r)!
The times you find index in rotated sorted array is actually number of rotations, like low will have left part min and
right part of mid so how many times we will update our answer of minimum, we will update index with replaced index either
low or mid.

Find patterns in numbers when divided by X and Y and having X and Y as digits. Finding pattern will help us to solve fast.

A factorial is a function in mathematics with the symbol (!) that multiplies a number (n) by every number that precedes it
Multiplication of elements inclusively from 1 to n where inclusiveness introduced boundary of numbers.

Combination is the counting of selections that we make from n objects. Whereas Permutation is counting the number of arrangements from n objects. 

 if we want to buy a milkshake and we are allowed to combine any 3 flavours from Apple, Banana, Cherry, and Durian, 
then the combination of Apple, Banana, and Cherry is the same as the combination Banana, Apple, Cherry. 
whereas in permutation these will be treated as unique.

GCD of two even elements is atleast 2
GCD of two consective odd elements is 1
You can use previously stored items in dictionary for logic like for pair sum with on certain condition of uniques like adding only even pairs
Sum of elements.
Pair of Primes can be sometimes answer
Minimum, Maximum
Power of two numbers formulas
if arr[i-1] and arr[i+1] having effect on arr[i] then there will be something coincidence that others will also be effected
a+b = c
Summation of (ai) == K
For Odd numbers -> 2*k + 1, like 11 is 2*5+1 -> can be as 2*(k-1) + 3.......Like 2*4 + 3
B divides A, smallest number will not be divided by big number.
Same Numbers, Unique Numbers
Pair by Pair comparison
Mod Operator 
Two Even Elements or ODD elements always sums upto Even number
Pair of even and odd always give odd number
Works for desorting array by finding smallest difference and then using smallestDiff//2 + 1
XOR:
A⊕0=A, A⊕A=0, A⊕B=B⊕A, Commutative and Associatative
Let say we want to find x from array by taking xor ,then element is xor of all elements in array in case of odd length
XOR of elements is 0 then any element taking XOR with Zero will be element
For even length XOR if no zero then taking xor with x as zero not possible

Extreme Round Digits have only 1 non-zero digit
Power Function:
def takeP(a,b):
    res = 1
    while b > 0 :
        if b & 1:
            res = (res * a) % MOD
        a = (a * a) % MOD
        b//=2 
    return res
// also takes role , polygon has 3,4,5,6,8 sides. 3//3 -> 1, 4//4 ->, 3 sides makes 1 polygon similarly other for 4

Do precomputation

If Array has only 1,-1,, then see n//2.  negatives - n//2 , if n//2 is odd then (negatives - n//2 ) + 1 else same negatives - n//2 
because even pa 1,-1 brabar or sum zero hugye ga islye. Check middle for even/odd

Comparison of two points using abs function

import sys
sys.stdout = open('output.txt','w')  
sys.stdin = open('input.txt','r')

Adjacent by side -> rows/columns
Adjacent by corners -> diagonals

A number is divisible by 25
 if and only if its last two digits represent one of the following strings: "00", "25", "50", "75".
Even + Even is Even, but odd + even is odd so for total sum need to be even we need to have odd elements count even. 1 + 3 == 4

To make a number exactly 0 by dividing by k and tell how many operations took we use  count = count + number % k
for counting minimum number of operations

When you select three unique digits, two digits are odd atleast 10 20 30

Suppose you have array want to maximize any element + any element //2 and then adding it in array then we can do that by sorting array
and starting divide and storing results.

MEX is minimum excluded value in array that is first excluded one


Try to count pairs according to conditions either there is good array or beautiful array


HCF:
def hcf(a, b):
    if(b == 0):
        return a
    else:
        return hcf(b, a % b)

Focus on parity of indexes while in sorted array to find single element like
2,2,4,4,5,6,6 so here after 5 indexes will be (odd,even)

Finding single element in sorted array.
3,3,4,5,5
6,6,7,8,8
while left <=right:
              mid = left + (right - left) //2
              if nums[mid]!= nums[mid-1] and nums[mid]!= nums[mid+1]:
                 return nums[mid]
                 
  # even odd
              elif (mid&1 and nums[mid]== nums[mid-1]) or (mid+1&1 and nums[mid]== nums[mid+1]):
                   left = mid + 1
              else:  # odd even
                   right = mid 
        return -1
              

        